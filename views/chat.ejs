<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
      margin: 0;
      font-family: 'Segoe UI', sans-serif;
      background-color: #f4f7fa;
      color: #333;
      overflow-x: hidden;
    }
        #videos {
            display: grid;
            grid-template-columns: 1fr;
            height: 100%;
            width: auto;
            overflow: hidden;
        }

        .video-player {
            background-color: black;
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .smallFrame {
            position: fixed;
            bottom: 100px;
            right: 20px;
            height: 170px;
            width: 300px;
            border-radius: 6px;
            z-index: 10;
        }

        #controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1em;
        }

        .control-container {
            background-color: #6df966;
            padding: 20px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

        .control-container svg {
            height: 30px;
            width: 30px;
        }

        #leave-btn {
            background-color: rgb(255, 80, 80, 1);
        }

        @media screen and (max-width: 600px) {
            .smallFrame {
                height: 120px;
                width: 160px;
                 border-radius: 10px;
            }

            .control-container img {
                height: 20px;
                width: 20px;
            }
        }
    </style>
    <link href="/css/style.css" rel="stylesheet">
    <link href="/css/test.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

</head>

<body class="flex flex-col h-dvh ">
     
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', sans-serif;
      background-color: #f4f7fa;
      color: #333;
      overflow-x: hidden;
    }

   
    .hero {
      text-align: center;
      padding: 5rem 2rem;
    }

    .hero h1 {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .hero p {
      font-size: 1.1rem;
      color: #666;
      max-width: 600px;
      margin: 0 auto 3rem;
    }

    .form-section {
      background-color: #fff;
      padding: 2rem;
      max-width: 400px;
      margin: 0 auto;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }

    .form-section label {
      display: block;
      margin-top: 1rem;
      font-weight: 500;
    }

    .gender-options {
      display: flex;
      justify-content: space-between;
      margin-top: 0.5rem;
    }

    .gender-options input {
      margin-right: 0.5rem;
    }

    input[type="text"] {
      width: 100%;
      padding: 0.75rem;
      margin-top: 0.5rem;
      border: 1px solid #ccc;
      border-radius: 8px;
      font-size: 1rem;
    }

    button {
      margin-top: 1.5rem;
      padding: 0.75rem 1.5rem;
      background-color: #4a90e2;
      color: #fff;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #357bd8;
    }

    /* Responsive Navbar */
    
  </style>
   
  
    <%- include('partials/nav') %> 
    <%- include('partials/navbar2') %> 
       <style>
        .videoblock {
            position: fixed;
            bottom: 0;
            right: 0; 
            width: 100%;
            height: 100%;
            background-color: rgba(122, 107, 107, 0.733);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 222; /* Ensure it appears above other content */
            padding: 30px 110px 0px 110px;
            margin-top: 1rem;
           

        }
        @media screen and (max-width: 600px) {
            .videoblock {
                padding: 10px 0px 0px 0px;
                margin-top: 0;
            }
            
        }
       </style>
   
     <!-- Modal: Prompt to switch from AI to real user -->
<!-- <div id="switchPrompt"
     class="hidden fixed inset-0 z-50 bg-black bg-opacity-40 flex items-center justify-center p-4">
  <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg max-w-md w-full p-6">
    
    <p class="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-4 text-center">
      A real user is available. Do you want to switch?
    </p>

    <div class="flex items-center space-x-3 mb-4 justify-center">
      <img id="realUserImg" src="" alt="User" class="w-12 h-12 rounded-full border" />
      <span id="realUserName" class="font-medium text-gray-900 dark:text-gray-100 text-base"></span>
    </div>

    <div class="flex justify-center gap-4 mt-2">
      <button id="acceptRealUser"
              class="bg-green-500 hover:bg-green-600 text-white px-5 py-2 rounded-md transition">
        Yes
      </button>
      <button id="declineRealUser"
              class="bg-gray-300 hover:bg-gray-400 text-gray-800 dark:text-white px-5 py-2 rounded-md transition">
        No
      </button>
    </div>
  </div>
</div> -->


        <div class="fixed videoblock">
            <div id="videos">
                <video class="video-player" id="localVideo" autoplay muted playsinline></video>
                <video class="video-player" id="remoteVideo" autoplay playsinline></video>
            </div>
            <div id="controls">
                <div class="control-container" id="cameraButton">
                    <svg width="21" height="14" viewBox="0 0 21 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                            d="M20.525 2.149C20.365 2.05 20.183 2 20 2C19.847 2 19.694 2.035 19.553 2.105L17 3.382V3C17 1.346 15.654 0 14 0H3C1.346 0 0 1.346 0 3V11C0 12.654 1.346 14 3 14H14C15.654 14 17 12.654 17 11V10.618L19.553 11.894C19.694 11.965 19.847 12 20 12C20.183 12 20.365 11.95 20.525 11.851C20.82 11.668 21 11.347 21 11V3C21 2.653 20.82 2.332 20.525 2.149ZM5 8.5C4.171 8.5 3.5 7.829 3.5 7C3.5 6.171 4.171 5.5 5 5.5C5.829 5.5 6.5 6.171 6.5 7C6.5 7.829 5.829 8.5 5 8.5Z"
                            fill="white" />
                    </svg>
                </div>

                <div class="control-container" id="hangup">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M0 0h24v24H0z" fill="red" />
                        <path
                            d="M20 15.5c-.78 0-1.55-.3-2.12-.88l-1.43-1.42a4.007 4.007 0 0 0-5.54 0l-1.43 1.42A2.983 2.983 0 0 1 4 15.5c-.78 0-1.55-.3-2.12-.88A2.983 2.983 0 0 1 1 12.5a2.983 2.983 0 0 1 .88-2.12l7-7a4.007 4.007 0 0 1 5.54 0l7 7c.58.58.88 1.34.88 2.12s-.3 1.55-.88 2.12c-.58.58-1.34.88-2.12.88z" />
                    </svg>
                </div>

                <div class="control-container" id="micButton">
                    <svg width="20" height="20" viewBox="0 0 14 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd"
                            d="M7 12.5C8.7 12.5 10 11.2 10 9.5V3.5C10 1.8 8.7 0.5 7 0.5C5.3 0.5 4 1.8 4 3.5V9.5C4 11.2 5.3 12.5 7 12.5ZM12.3 9.5C12.3 12.5 9.8 14.6 7 14.6C4.2 14.6 1.7 12.5 1.7 9.5H0C0 12.9 2.7 15.7 6 16.2V19.5H8V16.2C11.3 15.7 14 12.9 14 9.5H12.3Z"
                            fill="white" />
                    </svg>
                </div>
            </div>
        </div>
        <div id="incoming-call"
            class="fixed hidden z-[222] w-full h-dvh bg-gray-900 bg-opacity-75 flex items-center justify-center">
            <div class="bg-white p-8 rounded-md text-center">
                <p class="mb-4">Incoming Call...</p>
                <button id="accept-call" class="bg-green-500 text-white py-2 px-4 rounded-md">Accept</button>
                <button id="reject-call" class="bg-red-500 text-white py-2 px-4 rounded-md ml-2">Reject</button>
            </div>
        </div>
        <main class="flex-1 p-4 overflow-y-auto relative space-y-2" id="message-container">
            <div
                class="text-zinc-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center nobody">
                Welcome to the chat room!<br>
                Start typing your messages below or click on the video call button to initiate a video call.
               </div>
        </main>
        <style>
            :root {
                --chatform-shadow: rgba(0, 0, 0, 0.1);
                --chatform-bg-color: #f4f7fa;
                --chatform-text-color: #333;
            }

            body[data-theme='dark'] {
                --bg-color: #1e1e1e;
                --text-color: #f1f1f1;
                --card-color: #2c2c2c;
                --primary-color: #7aa2f7;
                --tooltip-bg-color: #3a3a3a;
                /* darker, custom tooltip bg for dark theme */
                --tooltip-shadow: rgba(0, 0, 0, 0.6);
                --chatform-bg-color: #2c2c2c;
                 --chatform-text-color: #f1f1f1;
            }
            #chatform{
               color: var(--chatform-text-color); /* optional to adapt text color on theme */
                background-color: var(--chatform-bg-color); /* variable here */
                 box-shadow: 0 2px 8px var(--chatform-shadow); /* adjustable shadow */
            }
            #messagebox{
                color: black;
            }
        </style>
        <!-- <form id="chatform" class="bg-white p-4 flex">
            <input type="hidden" id="userid" value="">
            <input type="text" id="messagebox"
                class="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="Type a message">
            <button type="submit"
                class="ml-2 bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700">Send</button>
        </form> -->
      <!-- trial  above code is working fine , below code making theme consistent  -->
        <form id="chatform" class=" p-4 flex">
  <input type="hidden" id="userid" value="">
<input
  type="text"
  id="messagebox"
  class="flex-1 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
  placeholder="Type a message"
/>

  <button
    type="submit"
    class="ml-2 bg-indigo-600 dark:bg-indigo-500 text-white py-2 px-4 rounded-md hover:bg-indigo-700 dark:hover:bg-indigo-600"
  >
    Send
  </button>
</form>


        <video id="local-video" class="hidden" autoplay></video>
        <video id="remote-video" class="hidden" autoplay></video>

        <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"
            integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
            crossorigin="anonymous"></script>
         
        <script>
            const socket = io();
            const chatform = document.querySelector("#chatform");
            const messagebox = document.querySelector("#messagebox");
            const messagecontainer = document.querySelector("#message-container");

            let room;

            document.querySelector('#micButton').addEventListener('click', toggleAudio);
            document.querySelector('#cameraButton').addEventListener('click', toggleVideo);




           const userName = <%- JSON.stringify(userName) %>;
    const userImg = <%- JSON.stringify(userImg) %>;

            socket.emit("joinroom", { userName, userImg });


    socket.on("joined", function ({ roomname, opponentName, opponentImg }) {
        room = roomname;
        console.log("Joined room:", roomname, "Opponent:", opponentName);
      //check langauge otherwise put english
      if(localStorage.getItem("preferredLang") === null) {
        localStorage.setItem("preferredLang", "English");
      }

        document.querySelector(".nobody")?.classList.add("hidden");

        // Hide waiting, show opponent
        document.getElementById("waitingSection").classList.add("hidden");
        document.getElementById("opponentSection").classList.remove("hidden");

        // Set opponent info
        document.getElementById("opponentName").innerText = opponentName;
        document.getElementById("opponentImg").src = opponentImg || "/images/male1";
    });

     // disconection logic if opponent disconnects 
        socket.on('partner-disconnected', () => {
            alert("Your partner has disconnected.");
            window.location.reload();
        });

    
            // socket.on("message", function (message) {
            //     receiveMessage(message);
            // })
                //   below is trail for translation and  this is  the code the above code is commented
            // trial for translation from here

            socket.on("message", async function (msg) {
    const userLang = localStorage.getItem("preferredLang") || "English"; 
        console.log("Line 361  Received message:", msg, "User language:", userLang);
                try {
                    const translated = await translateMessage(msg, userLang);

                    if (translated.trim().toLowerCase() === msg.trim().toLowerCase()) {
                        receiveMessage(msg);  // Same language, show original
                    } else {
                        receiveTranslatedMessage(msg, translated);  // Show both
                    }
                } catch (e) {
                    console.error("Translation failed:", e);
                    receiveMessage(msg); // fallback
                }
            });

            // trial for translation from here


            chatform.addEventListener("submit", function (event) {
                event.preventDefault();
                socket.emit("message", { room: room, message: messagebox.value });
                attachMessage(messagebox.value);
                messagebox.value = "";
            })

            function attachMessage(message) {
                const userMessageContainer = document.createElement('div');
                userMessageContainer.classList.add('flex', 'my-2', 'justify-end');

                const userMessageDiv = document.createElement('div');
                userMessageDiv.classList.add('bg-blue-500', 'text-white', 'p-3', 'rounded-lg', 'max-w-xs');

                const userMessageText = document.createElement('p');
                userMessageText.textContent = message;

                userMessageDiv.appendChild(userMessageText);

                userMessageContainer.appendChild(userMessageDiv);

                document.getElementById('message-container').appendChild(userMessageContainer);

                document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
            }

            function receiveMessage(message) {
                const messageContainer = document.createElement('div');
                messageContainer.classList.add('flex', 'my-2', 'justify-start');

                const messageDiv = document.createElement('div');
                messageDiv.classList.add('bg-gray-300', 'text-gray-800', 'p-3', 'rounded-lg', 'max-w-xs');

                const messageText = document.createElement('p');
                messageText.textContent = message;

                messageDiv.appendChild(messageText);

                messageContainer.appendChild(messageDiv);

                document.getElementById('message-container').appendChild(messageContainer);
                document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
            }
            //  this is trial for translation 
          function receiveTranslatedMessage(original, translated) {
                const container = document.getElementById("message-container");

                // Create a wrapper div with limited width and alignment
                const messageWrapper = document.createElement("div");
                messageWrapper.style.display = "flex";
                messageWrapper.style.flexDirection = "column";
                messageWrapper.style.alignItems = "flex-start";
                messageWrapper.style.maxWidth = "75%";
                messageWrapper.style.margin = "10px 0";

                // Original message bubble
                const originalBubble = document.createElement("div");
                originalBubble.style.backgroundColor = "#d1d5db"; // Tailwind gray-300
                originalBubble.style.color = "#1f2937"; // Tailwind gray-900
                originalBubble.style.padding = "8px 12px";
                originalBubble.style.borderRadius = "12px";
                originalBubble.style.boxShadow = "0px 1px 3px rgba(0, 0, 0, 0.2)";
                originalBubble.style.display = "inline-block";
                originalBubble.style.wordBreak = "break-word";
                originalBubble.style.maxWidth = "100%";
                originalBubble.innerText = original;

                // Translated message bubble
                const translatedBubble = document.createElement("div");
                translatedBubble.style.backgroundColor = "#dbeafe"; // Tailwind blue-100
                translatedBubble.style.color = "#374151"; // Tailwind gray-700
                translatedBubble.style.padding = "6px 10px";
                translatedBubble.style.borderRadius = "10px";
                translatedBubble.style.marginTop = "4px";
                translatedBubble.style.boxShadow = "inset 0px 1px 2px rgba(0, 0, 0, 0.1)";
                translatedBubble.style.fontSize = "0.9rem";
                translatedBubble.style.fontStyle = "italic";
                translatedBubble.style.display = "inline-block";
                translatedBubble.style.wordBreak = "break-word";
                translatedBubble.style.maxWidth = "100%";
                translatedBubble.innerText = `Translated: ${translated}`;

                // Add both bubbles
                messageWrapper.appendChild(originalBubble);
                messageWrapper.appendChild(translatedBubble);

                // Add to container
                container.appendChild(messageWrapper);
                container.scrollTop = container.scrollHeight;
            }

             
             async function translateMessage(message, targetLang) {
                    const response = await fetch("/translate", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            text: message,
                            language: targetLang
                        })
                    });

                    const data = await response.json();
                    console.log("Line 620: Translation response:", data);
                    return data.translation; // make sure this matches what backend sends
                }



            //  this is trial for translation 
            // WEBRTC START
            let localStream;
            let remoteStream;
            let peerConnection;
            let inCall = false;

            const rtcSettings = {
                iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
            };

            const initialize = async () => {
                socket.on("signalingMessage", handleSignalingMessage);

                try {
                    localStream = await navigator.mediaDevices.getUserMedia({
                        audio: true,
                        video: true
                    })
                    document.querySelector("#localVideo").srcObject = localStream;
                    document.querySelector("#localVideo").style.display = "block";

                    initiateOffer();

                    inCall = true;
                }
                catch (err) {
                    console.log("Rejected by browser" + err);
                }
            }

            const initiateOffer = async () => {
                await createPeerConnection();
                try {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);
                    socket.emit("signalingMessage", {
                        room,
                        message: JSON.stringify({
                            type: "offer",
                            offer
                        })
                    })
                }
                catch (err) {
                    console.log("error in creating offer" + err);
                }
            }

            const createPeerConnection = () => {
                peerConnection = new RTCPeerConnection(rtcSettings);

                remoteStream = new MediaStream();

                document.querySelector("#remoteVideo").srcObject = remoteStream;
                document.querySelector("#remoteVideo").style.display = "block";
                document.querySelector("#localVideo").classList.add("smallFrame");

                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                })

                peerConnection.ontrack = (event) => {
                    event.streams[0].getTracks().forEach(track => {
                        remoteStream.addTrack(track);
                    })
                }

                peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        console.log("Sending Ice Candidates");

                        socket.emit("signalingMessage", {
                            room,
                            message: JSON.stringify({
                                type: "candidate",
                                candidate: event.candidate
                            })
                        })
                    }
                }

                peerConnection.onconnectionstatechange = () => {
                    console.log("Line 573", peerConnection.connectionState);
                }
            }

            const handleSignalingMessage = async (message) => {
                const { type, offer, answer, candidate } = JSON.parse(message);
                if (type === "offer") handleOffer(offer);
                if (type === "answer") handleAnswer(answer);
                if (type === "candidate" && peerConnection) {
                    try { await peerConnection.addIceCandidate(candidate); }
                    catch (error) {
                        console.log(error);
                    }
                }
                if (type === "hangup") {
                    hangup()
                }
            }

            const handleOffer = async (offer) => {
                await createPeerConnection();
                try {
                    await peerConnection.setRemoteDescription(offer);
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "answer", answer }) });
                    inCall = true;
                }
                catch (error) {
                    console.log("failed to handle offer");
                }
            }

            const handleAnswer = async (answer) => {
                try {
                    await peerConnection.setRemoteDescription(answer);
                }
                catch (error) {
                    console.log("failed to handle answer");
                }
            }


            document.querySelector("#video-call-btn")
                .addEventListener("click", function () {
                    socket.emit("startVideoCall", { room })
                })

            socket.on("incomingCall", function () {
                console.log("hey");
                document.querySelector("#incoming-call").classList.remove("hidden");
            })

            socket.on("callAccepted", function () {
                initialize();
               // document.querySelector(".videoblock").classList.remove("hidden");
                document.querySelector(".videoblock").style.display = "flex";

            })

            document.querySelector("#accept-call")
                .addEventListener("click", function () {
                    document.querySelector("#incoming-call").classList.add("hidden");
                    initialize();
                    document.querySelector(".videoblock").style.display = "flex";
                    socket.emit("acceptCall", { room })
                })

            document.querySelector("#reject-call")
                .addEventListener("click", function () {
                    document.querySelector("#incoming-call").classList.add("hidden");
                    socket.emit("rejectCall", { room })
                })

            socket.on("callRejected", function () {
                alert("Call rejected by other user");
            })

            document.querySelector("#hangup")
                .addEventListener("click", function () {
                    hangup();
                })

            function hangup() {
                if (peerConnection) {
                    peerConnection.close();
                    peerConnection = null;
                    localStream.getTracks().forEach(track => track.stop());

                    document.querySelector(".videoblock").style.display = "none";
                    socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "hangup" }) });
                    inCall = false;
                }
            }

            function toggleAudio() {
                const audioTracks = localStream.getAudioTracks();
                if (audioTracks.length > 0) {
                    const isEnabled = audioTracks[0].enabled;
                    audioTracks[0].enabled = !isEnabled;
                    document.querySelector('#micButton').classList.toggle('muted', isEnabled);
                }
            }

            function toggleVideo() {
                const videoTracks = localStream.getVideoTracks();
                if (videoTracks.length > 0) {
                    const isEnabled = videoTracks[0].enabled;
                    videoTracks[0].enabled = !isEnabled;
                    document.querySelector('#cameraButton').classList.toggle('stopped', isEnabled);
                }
            }

            //this is temporary code  due to navbar error 
           //when real user arrives notify other user in ai cha

           // Clear chat messages function
    

    socket.on("switchToRealUser", () => {
        alert("A real user is available. You will be switched to them.");

    window.location.reload();
  
});
            socket.on("updateUserCount", (count) => {
                console.log("User count updated:", count);
    document.getElementById("user-count").textContent = `Active Users: ${count}`;
});

        </script>
        <script>
            <!-- function isMobileDevice() {
                return /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase());
            }

            if (isMobileDevice()) {
               
                window.location.href = "/error"; // Change "/error" to your actual error page URL
            } -->
        </script>

</body>

</html>